// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZPI.Persistance.ZPIDb;

#nullable disable

namespace ZPI.Persistance.ZPIDb.Migrations
{
    [DbContext(typeof(ZPIDbContext))]
    [Migration("20221023142058_AddUserPreferenceEntity")]
    partial class AddUserPreferenceEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("zpi")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZPI.Persistance.Entities.AlertEntity", b =>
                {
                    b.Property<int>("Identifier")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("OriginAssetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Identifier", "UserId");

                    b.HasIndex("OriginAssetId");

                    b.ToTable("Alerts", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.AssetEntity", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.ToTable("Assets", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.AssetValueEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Identifier"));

                    b.Property<string>("AssetIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<OffsetDateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Identifier");

                    b.HasIndex("AssetIdentifier");

                    b.ToTable("AssetValues", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.TransactionEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Identifier"));

                    b.Property<string>("AssetIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<OffsetDateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Identifier");

                    b.HasIndex("AssetIdentifier");

                    b.ToTable("Transactions", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.UserAssetEntity", b =>
                {
                    b.Property<string>("AssetIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("AssetIdentifier", "UserId");

                    b.ToTable("UserAssets", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.UserPreferencesEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("AlertsOnEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferenceCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WeeklyReports")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("UserPreferences", "zpi");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.AlertEntity", b =>
                {
                    b.HasOne("ZPI.Persistance.Entities.AssetEntity", "Asset")
                        .WithMany("Alerts")
                        .HasForeignKey("OriginAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.AssetValueEntity", b =>
                {
                    b.HasOne("ZPI.Persistance.Entities.AssetEntity", "Asset")
                        .WithMany("Values")
                        .HasForeignKey("AssetIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.TransactionEntity", b =>
                {
                    b.HasOne("ZPI.Persistance.Entities.AssetEntity", "Asset")
                        .WithMany("Transactions")
                        .HasForeignKey("AssetIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.UserAssetEntity", b =>
                {
                    b.HasOne("ZPI.Persistance.Entities.AssetEntity", "Asset")
                        .WithMany("UserAssets")
                        .HasForeignKey("AssetIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ZPI.Persistance.Entities.AssetEntity", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Transactions");

                    b.Navigation("UserAssets");

                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
